ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(lattice)
class(xyplot())
head(diamonds)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.abline
?points
?geom
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(v = 0.4, col = "red")
abline(h = 0.4, col = "red")
5
abline(h = 0.05, col = "red")
abline(h = 0.05)
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
tylerkabana
0
plot(1)
library(swirl)
swirl()
cmat
points(cs, cy, col = c("red", "orange", "purple"),pch = 3, cex = 2, lwd =2)
points(cx, cy, col = c("red", "orange", "purple"),pch = 3, cex = 2, lwd =2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean())
tapply(x, newClust, mean
)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
library(swirl)
swirl
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source(filename("addPatt.R"), local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
play()
svd1$v
svd1
summary(svd1)
svd1$v[,1]
class(svd1)
?list
names(list)
nxt()
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd$d
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[, 1:2] %*% svd1$d[1:2] %*% t(svd1$[,1:2])
a2 <- svd1$u[, 1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[, 562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist(dist(sub1[, 10:12]))
mdist <- dist(sub1[, 10:12]))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, c(562, 563)]))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, 1:10], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown(which = kClust$size==49)
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swir()
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 > 0
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates, %Y%m%d))
dates <- as.Date(as.character(dates), %Y%m%d)
dates <- as.Date(as.character(dates), "%Y%m%d"")
dates <- as.Date(as.character(dates), "%Y%m%d")
dates <- as.Date(as.character(dates), "%Y%m%d")
swirl()
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
swirl()
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
ucscDb <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
ucscDb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "'select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMathces)
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr = 5, nc = 2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by = 0.1), dim = c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
h5read("example.h5", "foo/A")
h5write(c(12,13,14), "example.h5", "foo/A", index = list(1:3, 1))
h5read("example.h5", "foo/A")
h5read("example.h5", "foo/A", index = list(1:3, 1))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "7a85a3a6ffbb72d2c04f", secret = "669631054761022afd27c7541ef70cffc827d224")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
req <- with_config(gtoken,  GET("https://api.github.com/rate_limit"))
stop_for_status(req)
GET https://github.com/login/oauth/authorize
req <- with_config(gtoken,  GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "7a85a3a6ffbb72d2c04f", secret = "669631054761022afd27c7541ef70cffc827d224")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
content(req)
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("httpuv")
library(jsonlite)
library(httpuv)
library(httr)
oauth_endpoints("github")
library(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl", dependencies = TRUE)
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
swirl()
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
library(Swirl)
library(swirl)
swirl()
swirl()
swirl()
remove.packages("yaml")
install.packages("devtools")
library(devtools)
install_version("yaml", version = "2.1.16")
swirl()
library(swirl)
swirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
seq(5:20)
5:20
select(cran, r_arch:country)
select(cran, -r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(C:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version =< "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country =="US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique
)
arrange(top_unique, unique())
top_unique <- arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted
)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
reset()
swirl()
submit
submit()
reset()
swirl()
submit()
submit()
?mutate
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
next()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
?mutate
mutate(passed, passed = passed)
mutate(passed, passed == passed)
passed
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(failed, status = "failed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
?separate
submit()
submit()
setwd("./Coursera/Course3/week4/CourseProject")
source("run_analysis.R")
source("run_analysis.R")
setwd("../../")
source("run_analysis.R")
activity_labels[, 2]
features[, 2]
source("run_analysis.R")
setwd("../")
source("run_analysis.R")
head(features)
source("run_analysis.R")
featuresWanted
features[featuresWanted, 2]
?grp
?grep
?gsub
source("run_analysis.R")
head(featuresWanted.names)
source("run_analysis.R")
head(featuresWanted.names)
activity_labels[, 2]
source("run_analysis.R")
setwd('../../')
source("run_analysis.R")
head(train)
dim(train)
dim(featuresWanted)
length(features)
length(featuresWanted)
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
head(train)
dim(train)
length(featuresWanted)
trainActivities
trainSubjects
source("run_analysis.R")
head(all)
head(all)
source("run_analysis.R")
head(all)
?dcast
source("run_analysis.R")
read.table("tidy.txt")
tidy <- read.table("tidy.txt")
head(tidy)
factors(tidy)
?factor
head(testActivities)
testActivities[77]
testActivities
testActivities[77,2]
testActivities[2, 77]
head(testActivities)
testActivities[798, 1]
activity_labels
source("run_analysis.R")
